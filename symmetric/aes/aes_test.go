package aes

import (
	"crypto/internal/utils"
	"reflect"
	"testing"
)

// func TestKeyExpansion(t *testing.T){
// 	var keyExpansionTests = []struct {
// 		key       []byte   // key
// 		roundKeys []uint32 // expected roundkeys
// 	}{
// 		{
// 			key: []byte{
// 				0x69, 0x61, 0x6D, 0x53, 0x74, 0x61, 0x65, 0x76,
// 				0x96, 0xC6, 0xCC, 0x6C, 0x69, 0x6E, 0x67, 0x77,
// 			},
// 			roundKeys: []uint32{
// 				0x69616d53, 0x74616576, 0x96c6cc6c, 0x696e6777,
// 				0xf7e498aa, 0x8385fddc, 0x154331b0, 0x7c2d56c7,
// 				0x2d555eba, 0xaed0a366, 0xbb9392d6, 0xc7bec411,
// 				0x8749dc7c, 0x29997f1a, 0x920aedcc, 0x55b429dd,
// 				0x02ec1d80, 0x2b75629a, 0xb97f8f56, 0xeccba68b,
// 				0x0dc8204e, 0x26bd42d4, 0x9fc2cd82, 0x73096b09,
// 				0x2cb721c1, 0x0a0a6315, 0x95c8ae97, 0xe6c1c59e,
// 				0x14112a4f, 0x1e1b495a, 0x8bd3e7cd, 0x6d122253,
// 				0x5d82c773, 0x43998e29, 0xc84a69e4, 0xa5584bb7,
// 				0x2c316e75, 0x6fa8e05c, 0xa7e289b8, 0x02bac20f,
// 				0xee141802, 0x81bcf85e, 0x265e71e6, 0x24e4b3e9,
// 			},
// 		},

// 	}
// 	for _,tuple := range keyExpansionTests{
// 		a, err := newAes(tuple.key);
// 		if err != nil {
// 			t.Fatal(err)
// 		}
// 		if !reflect.DeepEqual(a.roundkeys,tuple.roundKeys){
// 			t.Fatalf("Key Expansion Test failed with %d key Length", 8*(a.len))
// 		}
// 	}

// }
func TestCBC(t *testing.T){
	var (
		key = []byte{
			0x69, 0x61, 0x6D, 0x53, 0x74, 0x61, 0x65, 0x76,
			0x96, 0xC6, 0xCC, 0x6C, 0x69, 0x6E, 0x67, 0x77,
			0x69, 0x61, 0x6D, 0x53, 0x74, 0x61, 0x65, 0x76,
			0x96, 0xC6, 0xCC, 0x6C, 0x69, 0x6E, 0x67, 0x77,
		}
		in = []byte{
			0x79, 0x70, 0x74, 0x6f, 0x64, 0x37, 0x27, 0x7b,
			0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
			0x26, 0x17, 0x06, 0x87, 0x92, 0x06, 0x16, 0xe6,
			0x42, 0x04, 0xe6, 0x57, 0x47, 0x76, 0xf7, 0x26,
			0x79, 0x70, 0x74, 0x6f, 0x64, 0x37, 0x27, 0x7b,
			0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
			0x26, 0x17, 0x06, 0x87, 0x92, 0x06, 0x16, 0xe6,
			0x42, 0x04, 0xe6, 0x57, 0x47, 0x76, 0xf7, 0x26,
			0x06,
		}
		iv = []byte{
			0x50, 0x72, 0x65, 0x6E, 0x74, 0x69, 0x63, 0x65,
			0x48, 0x61, 0x6C, 0x6C, 0x49, 0x6e, 0x63, 0x2e,
		}
		cipher = []byte{
			0x9d, 0xc8, 0x20, 0x6d, 0xc1, 0xb4, 0x59, 0x43,
			0x65, 0xfb, 0x5a, 0x69, 0xf0, 0x74, 0x38, 0x8d,
			0x77, 0x28, 0x70, 0xea, 0x8f, 0x71, 0xf2, 0x00,
			0x33, 0xb7, 0x2b, 0x4d, 0x03, 0x80, 0xa0, 0x2d,
			0xc0, 0x5e, 0x2b, 0x2d, 0x58, 0x62, 0x83, 0x9d,
			0xd2, 0x98, 0x4f, 0x5f, 0x3e, 0x46, 0xa8, 0xfd,
			0x37, 0xbb, 0x03, 0x36, 0x5d, 0xf0, 0x8c, 0x63,
			0xe9, 0x48, 0x85, 0x6a, 0xb5, 0xc5, 0x0b, 0x71,
			0xd0, 0x49, 0xe9, 0x7e, 0x78, 0x25, 0xaf, 0x1f,
			0x68, 0x3f, 0xbf, 0x8d, 0xed, 0xe6, 0xeb, 0x01,
		}
	)
	a,err := newAes(key)
	if err != nil{
		t.Fatal(err)
	}
	if !reflect.DeepEqual(a.EncryptCBC(in,iv,utils.PKCS7Padding),cipher){
		t.Fatalf("CBC encryption Test failed.")
	}
}