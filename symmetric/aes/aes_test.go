package aes

import (
	"crypto/internal/utils"
	"reflect"
	"testing"
)

func TestKeyExpansion(t *testing.T){
	var keyExpansionTests = []struct {
		key       []byte   // key
		roundKeys []uint32 // expected roundkeys
	}{
		{
			key: []byte{
				0x69, 0x61, 0x6D, 0x53, 0x74, 0x61, 0x65, 0x76,
				0x96, 0xC6, 0xCC, 0x6C, 0x69, 0x6E, 0x67, 0x77,
			},
			roundKeys: []uint32{
				0x69616d53, 0x74616576, 0x96c6cc6c, 0x696e6777,
				0xf7e498aa, 0x8385fddc, 0x154331b0, 0x7c2d56c7,
				0x2d555eba, 0xaed0a366, 0xbb9392d6, 0xc7bec411,
				0x8749dc7c, 0x29997f1a, 0x920aedcc, 0x55b429dd,
				0x02ec1d80, 0x2b75629a, 0xb97f8f56, 0xeccba68b,
				0x0dc8204e, 0x26bd42d4, 0x9fc2cd82, 0x73096b09,
				0x2cb721c1, 0x0a0a6315, 0x95c8ae97, 0xe6c1c59e,
				0x14112a4f, 0x1e1b495a, 0x8bd3e7cd, 0x6d122253,
				0x5d82c773, 0x43998e29, 0xc84a69e4, 0xa5584bb7,
				0x2c316e75, 0x6fa8e05c, 0xa7e289b8, 0x02bac20f,
				0xee141802, 0x81bcf85e, 0x265e71e6, 0x24e4b3e9,
			},
		},

	}
	for _,tuple := range keyExpansionTests{
		a, err := newAes(tuple.key);
		if err != nil {
			t.Fatal(err)
		}
		if !reflect.DeepEqual(a.roundkeys,tuple.roundKeys){
			t.Fatalf("Key Expansion Test failed with %d key Length", 8*(a.len))
		}
	}

}
func TestCBC(t *testing.T){
	var (
		key = []byte{
			0x69, 0x61, 0x6D, 0x53, 0x74, 0x61, 0x65, 0x76,
			0x96, 0xC6, 0xCC, 0x6C, 0x69, 0x6E, 0x67, 0x77,
		}
		in = []byte{
			0x79, 0x70, 0x74, 0x6f, 0x64, 0x37, 0x27, 0x7b,
			0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
			0x26, 0x17, 0x06, 0x87, 0x92, 0x06, 0x16, 0xe6,
			0x42, 0x04, 0xe6, 0x57, 0x47, 0x76, 0xf7, 0x26,
			0x79, 0x70, 0x74, 0x6f, 0x64, 0x37, 0x27, 0x7b,
			0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
			0x26, 0x17, 0x06, 0x87, 0x92, 0x06, 0x16, 0xe6,
			0x42, 0x04, 0xe6, 0x57, 0x47, 0x76, 0xf7, 0x26,
			0x06,
		}
		iv = []byte{
			0x50, 0x72, 0x65, 0x6E, 0x74, 0x69, 0x63, 0x65,
			0x48, 0x61, 0x6C, 0x6C, 0x49, 0x6e, 0x63, 0x2e,
		}
		cipher = []byte{
			0x11, 0x6b, 0xe1, 0x60, 0xf9, 0x14, 0xdb, 0xfc,
			0x2d, 0xc7, 0x93, 0x4c, 0x97, 0x63, 0xdd, 0xfe,
		
			0x0f, 0x55, 0xdc, 0x47, 0x89, 0xf9, 0xb2, 0x0b,
			0xa3, 0xb3, 0xf8, 0x88, 0xdf, 0x35, 0x51, 0x70,
		
			0xf2, 0x3c, 0x36, 0xa6, 0x7a, 0xbf, 0x62, 0x8c,
			0x3b, 0x25, 0x3e, 0x97, 0x47, 0x12, 0xc2, 0xc5,
		
			0xee, 0xba, 0x01, 0x22, 0x9c, 0xd0, 0xde, 0x4c,
			0xb1, 0x21, 0x98, 0x45, 0xbe, 0x58, 0xff, 0x99,
		
			0xfd, 0x1e, 0xb0, 0xb0, 0x63, 0xf5, 0x7a, 0xf7,
			0x7d, 0x2b, 0xf2, 0x96, 0x2c, 0x55, 0x10, 0x43,
		}		
	)
	a,err := newAes(key)
	if err != nil{
		t.Fatal(err)
	}
	if !reflect.DeepEqual(a.EncryptCBC(in,iv,utils.PKCS7Padding),cipher){
		t.Fatalf("CBC encryption Test failed.")
	}
	if !reflect.DeepEqual(a.DecryptCBC(in,iv,utils.PKCS7UnPadding),in){
		t.Fatalf("CBC decryption Test failed")
	}
}

func TestGCM(t *testing.T){
	var (
		key = []byte{
			0x69, 0x61, 0x6D, 0x53, 0x74, 0x61, 0x65, 0x76,
			0x96, 0xC6, 0xCC, 0x6C, 0x69, 0x6E, 0x67, 0x77,
		}
		in = []byte{
			0x79, 0x70, 0x74, 0x6f, 0x64, 0x37, 0x27, 0x7b,
			0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
			0x26, 0x17, 0x06, 0x87, 0x92, 0x06, 0x16, 0xe6,
			0x42, 0x04, 0xe6, 0x57, 0x47, 0x76, 0xf7, 0x26,
			0x79, 0x70, 0x74, 0x6f, 0x64, 0x37, 0x27, 0x7b,
			0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
			0x26, 0x17, 0x06, 0x87, 0x92, 0x06, 0x16, 0xe6,
			0x42, 0x04, 0xe6, 0x57, 0x47, 0x76, 0xf7, 0x26,
			0x06,
		}
		iv = []byte{
			0x50, 0x72, 0x65, 0x6E, 0x74, 0x69, 0x63, 0x65,
			0x48, 0x61, 0x6C, 0x6C, 0x49, 0x6e, 0x63, 0x2e,
		}
		auth = []byte{
			0x50, 0x72, 0x65, 0x6E, 0x74, 0x69, 0x63, 0x65,
			0x48, 0x61, 0x6C, 0x6C, 0x49, 0x6e, 0x63, 0x2e,
		}
		tagLen = 16
		tag = []byte{
			0xd4, 0x7e, 0x9c, 0xaa, 0xf0, 0x80, 0x96, 0xa6,
			0xa7, 0xec, 0x0f, 0xfa, 0x55, 0x40, 0xfe, 0x41,
		}		
		cipher = []byte{
			0x00, 0x9f, 0x93, 0x02, 0x7c, 0x82, 0xa5, 0x12,
			0x43, 0xce, 0xff, 0x1b, 0x56, 0xbd, 0x97, 0xc8,
			0x57, 0xa7, 0x12, 0x2f, 0x54, 0xeb, 0x12, 0x4c,
			0xd3, 0x39, 0xaf, 0x0c, 0x7a, 0x00, 0x08, 0x0a,
			0xc1, 0x63, 0x8c, 0x39, 0x32, 0xb6, 0x69, 0x5c,
			0x64, 0xf7, 0xcd, 0x94, 0x6c, 0xde, 0xb1, 0x03,
			0xd3, 0x69, 0xe3, 0x0e, 0xa5, 0xa7, 0x58, 0x92,
			0x07, 0xdb, 0x7e, 0x5a, 0x2c, 0x4d, 0x40, 0x57,
			0xfd,
		}
	)
	a,err := newAes(key)
	if err != nil{
		t.Fatal(err)
	}
	actualcipher,actualTag := a.EncryptGCM(in,iv,auth,tagLen) 
	if(!reflect.DeepEqual(actualcipher,cipher)) || !reflect.DeepEqual(actualTag,tag){
		t.Fatalf("AES GCM Encryption Failed")
	}
	if !reflect.DeepEqual(a.DecryptGCM(cipher,iv,auth,tag),in){
		t.Fatalf("AES GCM Decryption Failed")
	}
}