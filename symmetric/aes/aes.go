package aes

import (
	"crypto/internal/utils"
	"encoding/binary"
)


type AES struct{
	nr int
	nk int 
	nb int
	len int
	key []byte
	roundkeys []uint32;
}

var SBox = [256]byte{
	0x9c, 0x32, 0x36, 0xfd, 0xfe, 0xf7, 0x57, 0xbc, 0x67, 0x89, 0x3c, 0x69, 0x35, 0xba, 0x62, 0x55,
	0x18, 0xed, 0x77, 0x51, 0x95, 0x76, 0xbb, 0xf2, 0xce, 0xd5, 0x6a, 0xc2, 0x20, 0xc6, 0xf5, 0x7f,
	0xa3, 0x5a, 0x84, 0xc1, 0xcb, 0xc3, 0x3d, 0xb4, 0xc7, 0xa5, 0x3b, 0x91, 0x9a, 0x1e, 0x04, 0x23,
	0x4a, 0xb0, 0x02, 0x10, 0x8b, 0x47, 0x29, 0x8c, 0x25, 0xec, 0xe1, 0xf4, 0xfc, 0xa2, 0x60, 0x3a,
	0xe2, 0x8e, 0xa6, 0x87, 0xe4, 0x34, 0x19, 0x66, 0x72, 0x63, 0xd9, 0x03, 0x65, 0x97, 0xc9, 0x41,
	0x11, 0x16, 0xea, 0x50, 0x6d, 0x39, 0x0f, 0x7a, 0x94, 0x7b, 0xab, 0x6f, 0x13, 0xbf, 0x15, 0xdb,
	0x75, 0x5c, 0x01, 0xf6, 0x1b, 0xdc, 0x08, 0x22, 0xb7, 0xfa, 0xe6, 0x5d, 0x7e, 0xac, 0x4f, 0x0d,
	0x1d, 0x09, 0x74, 0x45, 0xe7, 0x43, 0x0c, 0x31, 0xa7, 0xc0, 0x12, 0x0e, 0xe0, 0x56, 0x9d, 0x79,
	0xd7, 0x21, 0x8f, 0x33, 0xda, 0x24, 0xd4, 0x2f, 0xdf, 0xa9, 0x3e, 0xcf, 0x53, 0xd6, 0xe8, 0x96,
	0xf3, 0x82, 0xd0, 0xbe, 0x61, 0x0a, 0xeb, 0x8a, 0xd8, 0x3f, 0x07, 0x40, 0xb2, 0xb9, 0xee, 0x71,
	0xf8, 0x6b, 0x00, 0x8d, 0x7c, 0x46, 0xcd, 0xb5, 0x73, 0x1a, 0xad, 0xff, 0x88, 0x28, 0x58, 0xf1,
	0x37, 0x14, 0xa8, 0x5b, 0x49, 0xb6, 0xb3, 0x6e, 0x38, 0xd2, 0x52, 0x9f, 0x30, 0x9e, 0xa1, 0x81,
	0x0b, 0x92, 0xae, 0xaa, 0x2b, 0xca, 0xcc, 0xd3, 0x93, 0xdd, 0x59, 0x44, 0x70, 0xc4, 0xe5, 0x86,
	0xf9, 0xa0, 0xaf, 0x5f, 0x1f, 0x85, 0x5e, 0x2d, 0x90, 0xa4, 0xb1, 0x64, 0x4d, 0x1c, 0x48, 0x2c,
	0x9b, 0x99, 0x80, 0x83, 0xfb, 0x7d, 0x26, 0x4b, 0xef, 0x27, 0x2e, 0xf0, 0xb8, 0xbd, 0x06, 0xd1,
	0x2a, 0x05, 0xe9, 0x42, 0xc8, 0x54, 0x78, 0x98, 0x17, 0xe3, 0xc5, 0x4e, 0x6c, 0xde, 0x68, 0x4c,
}

var InverseSBox = [256]byte{
	0xa2, 0x62, 0x32, 0x4b, 0x2e, 0xf1, 0xee, 0x9a, 0x66, 0x71, 0x95, 0xc0, 0x76, 0x6f, 0x7b, 0x56,
	0x33, 0x50, 0x7a, 0x5c, 0xb1, 0x5e, 0x51, 0xf8, 0x10, 0x46, 0xa9, 0x64, 0xdd, 0x63, 0x2d, 0xd4,
	0x1c, 0x59, 0x20, 0x4f, 0x85, 0x30, 0x87, 0x38, 0xe6, 0xe9, 0xad, 0x36, 0xf0, 0xc4, 0xdf, 0xc3,
	0xea, 0x13, 0x01, 0x83, 0x45, 0x0c, 0x02, 0xb0, 0xb8, 0x55, 0x3f, 0x2a, 0x0a, 0x26, 0x8a, 0x99,
	0x9b, 0x4f, 0xf3, 0x75, 0xcb, 0x8f, 0xf5, 0x0f, 0x7d, 0x06, 0xae, 0xca, 0x21, 0xb3, 0x61, 0x07,
	0xa4, 0x0b, 0x1a, 0x93, 0xfc, 0x3c, 0x7e, 0x5b, 0x3e, 0x66, 0xd2, 0xe7, 0x29, 0xd8, 0xd1, 0x45,
	0x82, 0x43, 0x8e, 0x33, 0xeb, 0x62, 0x59, 0x58, 0xba, 0xbc, 0x19, 0x5e, 0x1b, 0x8f, 0x30, 0x4e,
	0xa5, 0xa9, 0x74, 0x95, 0xd5, 0x8c, 0x92, 0xee, 0xf0, 0xfd, 0xe5, 0xd0, 0xaa, 0x8e, 0x72, 0x2a,
	0x30, 0x04, 0x9c, 0xe4, 0x0d, 0x50, 0x45, 0x51, 0xc9, 0xce, 0x20, 0xbd, 0xbf, 0xdd, 0x60, 0x2d,
	0x52, 0x44, 0x19, 0x68, 0x5d, 0xaf, 0xcc, 0x86, 0x31, 0x70, 0xf3, 0x6b, 0x4d, 0xd7, 0xc8, 0x2c,
	0x9b, 0x37, 0xd6, 0xff, 0xc3, 0xb1, 0x94, 0x61, 0xf7, 0x80, 0x81, 0x54, 0xa2, 0x7f, 0xa8, 0x33,
	0x7b, 0x24, 0xc4, 0xca, 0xe0, 0xf5, 0xe7, 0xab, 0x0f, 0xec, 0xe3, 0xb3, 0x06, 0xb2, 0x02, 0x0a,
	0x79, 0x83, 0xef, 0xf1, 0x55, 0x3d, 0xda, 0xf2, 0x38, 0x8d, 0x88, 0x28, 0xcd, 0x62, 0xe8, 0xd9,
	0x5a, 0x46, 0x18, 0x2f, 0x65, 0x76, 0x90, 0xdf, 0x4b, 0xbb, 0xc5, 0x07, 0xf6, 0xd3, 0x0b, 0xb7,
	0xcb, 0x3c, 0x59, 0xa1, 0xe9, 0x93, 0x53, 0x6d, 0x00, 0x10, 0x99, 0xfa, 0x7d, 0xdb, 0x73, 0xe6,
}

var rcon = [10]uint32{
	0x01000000, 0x02000000, 0x04000000, 0x08000000, 0x10000000,
	0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000,
}


func newAes(key []byte)(*AES,error){
	aes := AES{
		nr:10,
		nk:4,
		nb:4,
		len: 16,
		key: key,
	}
	aes.roundkeys = aes.keyExpansion()
	return &aes,nil;
}

func (a *AES) keyExpansion()([]uint32){
	var w []uint32;
	for i := 0; i < a.nk; i++{
		w = append(w, binary.BigEndian.Uint32(a.key[4*i:4*i+4]))
	}
	for r := a.nk; r <= a.nb*(a.nr+1); r++{
		tmpW := make([]byte,4);
		binary.BigEndian.PutUint32(tmpW,w[r-1])
		if r%a.nk == 0{
			rootword(tmpW);
			a.subBytes(tmpW);
			tempRcon := make([] byte,4);
			binary.BigEndian.PutUint32(tempRcon,rcon[r/a.nk-1])
			xor(tmpW,tempRcon)
		}
		w = append(w, w[r-a.nk]^binary.BigEndian.Uint32(tmpW))
	}
	// mute debugging
	utils.DumpWords("KeyExpansion: ", w);
	return w;
}

func (a *AES) EncryptCBC(in []byte, iv []byte){
	
}

func (a *AES) DecryptCBC(in []byte, iv []byte){

}

func (a *AES) addRoundkey(state []byte,w []uint32){

}

func (a *AES) subBytes(state []byte){
	for i,v := range state{
		state[i] = SBox[v];
	}
}

func (a* AES) shiftRow(in []byte,i int,n int){
	in[i],in[i+4*1],in[i+4*2],in[i+4*3] = in[i+4*(n%4)],in[i+4*((n+1)%4)],in[i+4*((n+2)%4)],in[i+4*((n+3)%4)]
}

func (a *AES) invsubBytes(state []byte){
	for i,v := range state{
		state[i] = InverseSBox[v]
	}
}

func (a *AES) shiftRows(state []byte){
	a.shiftRow(state,1,1)
	a.shiftRow(state,2,2)
	a.shiftRow(state,3,3)
}
func (a *AES) invshiftRows(state []byte){
}

func (a *AES) mixCols(state []byte){

}

func (a *AES) invmixCols(state []byte){

}

func rootword(in []byte){
	in[0],in[1],in[2],in[3] = in[1],in[2],in[3],in[4]
}
func xor(m []byte,n []byte){
	if len(n) >= len(m){
		for i := 0; i <= len(m); i++{
			m[i] = m[i] ^ n[i];
		}
	}
}

func (a *AES) encryptBlock(state []byte,roundKeys []uint32){
	a.addRoundkey(state,roundKeys[0:4]);
	for round := 1; round < a.nr; round++{
		a.subBytes(state)
		a.shiftRow(state)
		a.mixCols(state)
		a.addRoundkey(state,roundKeys[4*round:4*round+4])
	}
	a.subBytes(state)
	a.shiftRow(state)
	a.addRoundkey(state,roundKeys[a.nr*4:a.nr*4+4])
}

func (a *AES) DecryptBlock(state []byte,roundKeys []uint32){

}